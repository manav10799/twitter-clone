{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Widgets.js","Feed.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","alt","fontSize","Widgets","tweetId","sourceType","screenName","options","height","url","via","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.900c0775.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./SidebarOption.css\";\r\n\r\nfunction SidebarOption({active,text,Icon}) {\r\n    return (\r\n        <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\r\n        <Icon />\r\n        <h2>{text}</h2>\r\n        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarOption;\r\n","import React from 'react';\r\nimport \"./Sidebar.css\";\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport SidebarOption from './SidebarOption';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport { Button } from '@material-ui/core';\r\n\r\nfunction Sidebar() {\r\n    return (\r\n        <div className=\"sidebar\">\r\n        {/* i'm gonna have twitter icon here*/}\r\n        <TwitterIcon className=\"sidebar__tweetIcon\"/>\r\n        <SidebarOption active Icon={HomeIcon} text=\"Home\"/>\r\n        <SidebarOption Icon={SearchIcon} text=\"Explore\"/>\r\n        <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\"/>\r\n        <SidebarOption Icon={MailOutlineIcon} text=\"Messages\"/>\r\n        <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\"/>\r\n        <SidebarOption Icon={ListAltIcon} text=\"Lists\"/>\r\n        <SidebarOption Icon={PermIdentityIcon} text=\"Profile\"/>\r\n        <SidebarOption Icon={MoreHorizIcon} text=\"More\"/>\r\n        <Button variant=\"outlined\" className=\"sidebar__tweet\" fullWidth>Tweet</Button>\r\n        \r\n        <h5 className=\"Love\">Made With ❤️ By Manav</h5>\r\n        {/* Sidebar options*/}    \r\n         {/* Sidebar options*/}   \r\n          {/* Sidebar options*/}   \r\n           {/* Sidebar options*/}   \r\n            {/* Sidebar options*/}   \r\n             {/* Sidebar options*/}   \r\n             {/* Button-Tweet */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar; \r\n","import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBjE9sedSBACb7FC6nz1Orivir1TJJuyRc\",\r\n    authDomain: \"twitter-clone-3c0d7.firebaseapp.com\",\r\n    databaseURL: \"https://twitter-clone-3c0d7.firebaseio.com\",\r\n    projectId: \"twitter-clone-3c0d7\",\r\n    storageBucket: \"twitter-clone-3c0d7.appspot.com\",\r\n    messagingSenderId: \"1083046664793\",\r\n    appId: \"1:1083046664793:web:7e3ea3281516f94753af48\",\r\n    measurementId: \"G-N5G4QNJ89Y\"\r\n  };\r\n  const firebaseApp=firebase.initializeApp(firebaseConfig);\r\n  const db=firebaseApp.firestore();\r\n  export default db;","import React,{useState} from 'react';\r\nimport \"./Tweetbox.css\";\r\nimport {Avatar,Button} from \"@material-ui/core\";\r\nimport db from \"./firebase\"\r\n\r\nfunction TweetBox() {\r\n    const [tweetMessage,setTweetMessage]=useState(\"\");\r\n    const [tweetImage,setTweetImage]=useState(\"\");\r\n    const sendTweet=(e)=>{\r\n        e.preventDefault();\r\n\r\n    db.collection(\"posts\").add({\r\n                displayName:\"Manav Arora\",\r\n                username:\"manav10799\",\r\n                verified:true,\r\n                text:tweetMessage,\r\n                image:tweetImage,\r\n                avatar:\"https://pbs.twimg.com/profile_images/1220216824194682880/C16AmCU6.jpg\",\r\n            });\r\n            setTweetMessage(\"\");\r\n            setTweetImage(\"\");\r\n    };\r\n    return (\r\n        <div className=\"tweetBox\">\r\n        <form>\r\n            <div className=\"tweetBox_input\">\r\n            <Avatar src=\"https://pbs.twimg.com/profile_images/1220216824194682880/C16AmCU6.jpg\" />\r\n            <input onChange={(e)=> setTweetMessage(e.target.value)} value={tweetMessage} placeholder=\"What's happening everyone?\" type=\"text\"></input>\r\n            </div>\r\n            <input value={tweetImage} onChange={(e)=>setTweetImage(e.target.value)} className=\"tweetBox_inputImage\" placeholder=\"Enter image URL\" type=\"text\"></input>\r\n            <Button onClick={sendTweet} type=\"submit\" className=\"tweetBox_tweetButton\">Tweet</Button>\r\n        </form>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TweetBox;\r\n","import React,{forwardRef} from 'react';\r\nimport \"./Post.css\"; \r\nimport { Avatar } from '@material-ui/core';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n\r\n\r\nconst Post=forwardRef(({displayName,username,verified,text,image,avatar},ref) =>{\r\n    return (\r\n        <div className=\"post\" ref={ref}>\r\n        <div className=\"post_avatar\">\r\n            <Avatar src={avatar}></Avatar>\r\n        </div>\r\n        <div className=\"post_body\">\r\n        <div className=\"post_header\">\r\n        <div className=\"post_headerText\">\r\n            <h3>\r\n                {displayName} {\" \"}\r\n                <span className=\"post_headerSpecial\">\r\n                   {verified ? <CheckCircleOutlineIcon className=\"post_badge\" /> :null} @{username}\r\n                </span>\r\n            </h3>\r\n        </div>\r\n        <div className=\"post_headerDescription\">\r\n            <p>{text}</p>\r\n        </div>\r\n\r\n        </div>\r\n        <img src={image} alt=\"\">\r\n            \r\n        </img>\r\n        <div className=\"post_footer\">\r\n        <ChatBubbleIcon fontSize=\"small\"/>\r\n        <RepeatIcon fontSize=\"small\"/>\r\n        <FavoriteBorderIcon fontSize=\"small\"/>\r\n        <PublishIcon fontSize=\"small\"/>\r\n        </div>\r\n        </div>\r\n            \r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport \"./Widgets.css\"\r\nimport{ TwitterTimelineEmbed,TwitterShareButton,TwitterTweetEmbed} from \"react-twitter-embed\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nfunction Widgets() {\r\n    return (\r\n        <div className=\"widgets\">\r\n        <div className=\"widgets_input\">\r\n            <SearchIcon className=\"widgets_searchIcon\" />\r\n            <input placeholder=\"Search Here\" type=\"text\" />\r\n        </div>\r\n        <div className=\"widgets_widgetContainer\">\r\n        <h2>What's happening</h2>\r\n        <TwitterTweetEmbed tweetId={\"1304655657354719232\"} \r\n\r\n        />\r\n        <TwitterTimelineEmbed \r\n            sourceType=\"profile\"\r\n            screenName=\"manav10799\"\r\n            options={{height:400}}\r\n        />\r\n        <TwitterShareButton \r\n        url={\"https://www.instagram.com/manav._arora/\"}\r\n        options={{text:\"#Hey Guys\",via:\"manav10799\"}}\r\n        />\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Widgets;\r\n","import React,{useEffect, useState} from 'react';\r\nimport \"./Feed.css\";\r\nimport TweetBox from \"./TweetBox\"\r\nimport Post from \"./Post\";\r\nimport Widgets from './Widgets';\r\nimport db from \"./firebase\";\r\nimport FlipMove from \"react-flip-move\"\r\n\r\nfunction Feed() {\r\n    const [posts,setPosts]=useState([]);\r\n\r\n    useEffect(()=>{\r\n         db.collection(\"posts\").onSnapshot(snapshot=>{\r\n             setPosts(snapshot.docs.map((doc) => doc.data()))\r\n         })\r\n    },[]);\r\n    return (\r\n         <div className=\"feed\">\r\n          {/*Header*/}  \r\n         <div className=\"feed_header\">\r\n          <h2>Home</h2>\r\n            </div>\r\n           {/*TweetBox*/}  \r\n            <TweetBox />\r\n<FlipMove>\r\n{posts.map((post)=>(\r\n    <Post \r\n    key={post.text}\r\n    displayName={post.displayName}\r\n            username={post.username}\r\n            verified={post.verified}\r\n            text={post.text}\r\n            avatar={post.avatar}\r\n            image={post.image}\r\n        />\r\n\r\n\r\n))}\r\n      \r\n</FlipMove>\r\n</div>\r\n       \r\n    );\r\n}\r\n\r\nexport default Feed;\r\n","import React from 'react';\nimport './App.css';\nimport Sidebar from \"./Sidebar\";\nimport Feed from \"./Feed\";\nimport Widgets from \"./Widgets\";\n\nfunction App() {\n  return (\n    //BEM\n    <div className=\"app\">\n     <Sidebar />\n\n      <Feed />\n\n         <Widgets />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}